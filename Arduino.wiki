= Arduino =


== Memory == 

Memory Map:

0-32 register file
32-96 I/O space
96-256 extended I/O space
256-2304 SRAM

=== I/O Space ===

64 bytes of I/O space with special instructions like in/out.
0-64

Extended I/O space must use store/load instructions like normal memory.
96-256

=== Addressing Modes ===

Direct
Indirect from X/Y/Z registers, allows pre-decrement, post-increment
Indirect With Offset from X/Y/Z registers - 63 addresses around X/Y/Z

=== Boot Flash ===

End of memory by default.
Can contain spm instruction.

=== Application Flash ===

Starts at start of flash memory space.

=== EEPROM ===

1K in separate address space
100000 writes

Reading halts CPU for 4 cycles
Writing halts CPU for 2 cycles

=== Stack ===

Initialized to just past SRAM.
Grows downwards in memory.

=== Interrupts ===

Status register is not saved by interrupts, this is handled by software.

The PC is stored on the stack as part of interrupt handling.

=== Sequence ===

Once enabled, the next instruction is executed, and interrupts are checked at the end.
When disabled, interrupts will not occur even if set during the enable instruction.

Some interrupts are held high (latched), and some are transient.

Interrupts have priority, with lowest number having highest priority. If interrupts
are enabled during an ISR, higher priority interrupts will interrupt the current
interrupt.

=== Timing ===

4 clock cycles to enter at least. If multi cycle instruction is being executed, it is completed.
4 cycles to exit.

== Timers ==

==== Clocking ====

The timer can be clocked in multiple ways. Internal clocks can be used, and an external clock on a
certain pin can be used. If the pin is to be read externally, it must be an input.
If the pin is set to output, it can be clocked by the software as a counter.

External clock sources can be rising and falling edge detected.

There are options for clock prescalling

==== 16 Bit Accesses ====

The 16 bit timers use an internal temporary register to allow 8 bit reads to read a value in two
accesses, or write two bytes.

The high byte must be written first, then low. The low byte must be read first, then high.

If an interrupt occurs between these two operations, and it also uses this temporary regitster,
you will read the wrong value outside the interrupt.
Multiple, but not all, 16 bit timer registers use this same temporary register.

